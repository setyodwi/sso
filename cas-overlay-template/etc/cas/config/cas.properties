cas.server.name=https://cas.kuncimasuk.com
cas.server.prefix=${cas.server.name}/cas

logging.config: file:/etc/cas/config/log4j2.xml

server.port=443

spring.security.user.name=wade
spring.security.user.password=de@dp00L



cas.serviceRegistry.watcherEnabled=true

# Auto-initialize the registry from default JSON service definitions
cas.serviceRegistry.json.location=file:/etc/cas/config/services
cas.serviceRegistry.initFromJson=true

# cas.serviceRegistry.managementType=DOMAIN
# # cas.serviceRegistry.jpa.healthQuery=SELECT 1 FROM INFORMATION_SCHEMA.SYSTEM_USERS
# cas.serviceRegistry.jpa.isolateInternalQueries=false
# cas.serviceRegistry.jpa.url=jdbc:postgresql://postgres/cas-service-registry
# cas.serviceRegistry.jpa.dialect=org.hibernate.dialect.PostgresPlusDialect
# cas.serviceRegistry.jpa.leakThreshold=10
# cas.serviceRegistry.jpa.batchSize=1
# cas.serviceRegistry.jpa.user=default
# cas.serviceRegistry.jpa.ddlAuto=update
# cas.serviceRegistry.jpa.password=secret
# cas.serviceRegistry.jpa.autocommit=true
# cas.serviceRegistry.jpa.driverClass=org.postgresql.Driver
# cas.serviceRegistry.jpa.idleTimeout=5000
# cas.serviceRegistry.jpa.pool.suspension=false
# cas.serviceRegistry.jpa.pool.minSize=6
# cas.serviceRegistry.jpa.pool.maxSize=18
# cas.serviceRegistry.jpa.pool.maxWait=2000




cas.authn.mfa.gauth.jpa.isolateInternalQueries=false
cas.authn.mfa.gauth.jpa.url=jdbc:postgresql://postgres/cas-mfa
cas.authn.mfa.gauth.jpa.dialect=org.hibernate.dialect.PostgresPlusDialect
cas.authn.mfa.gauth.jpa.leakThreshold=10
cas.authn.mfa.gauth.jpa.batchSize=1
cas.authn.mfa.gauth.jpa.user=default
cas.authn.mfa.gauth.jpa.ddlAuto=update
cas.authn.mfa.gauth.jpa.password=secret
cas.authn.mfa.gauth.jpa.autocommit=true
cas.authn.mfa.gauth.jpa.driverClass=org.postgresql.Driver
cas.authn.mfa.gauth.jpa.idleTimeout=5000
cas.authn.mfa.gauth.jpa.pool.suspension=false
cas.authn.mfa.gauth.jpa.pool.minSize=6
cas.authn.mfa.gauth.jpa.pool.maxSize=18
cas.authn.mfa.gauth.jpa.pool.maxWait=2000


logging.level.org.apereo=DEBUG
cas.authn.accept.users=

server.ssl.keyStore=file:/etc/cas/thekeystore
server.ssl.keyStorePassword=changeit
server.ssl.keyPassword=changeit



# cas.authn.jdbc.query[0].sql=SELECT * FROM USERS WHERE uid=?
# cas.authn.jdbc.query[0].url=jdbc:postgresql://db/cas
# cas.authn.jdbc.query[0].dialect=org.hibernate.dialect.PostgresPlusDialect
# cas.authn.jdbc.query[0].user=default
# cas.authn.jdbc.query[0].password=secret
# cas.authn.jdbc.query[0].driverClass=org.postgresql.Driver
# cas.authn.jdbc.query[0].fieldPassword=psw
cas.authn.ldap[0].name=Luminis LDAP
cas.authn.ldap[0].type=AUTHENTICATED
cas.authn.ldap[0].ldapUrl=ldap://openldap
cas.authn.ldap[0].searchFilter=uid={user}
cas.authn.ldap[0].useSsl=false
cas.authn.ldap[0].useStartTls=false
cas.authn.ldap[0].baseDn=ou=person,dc=directoryxx,dc=com
cas.authn.ldap[0].bindDn=cn=admin,dc=directoryxx,dc=com
cas.authn.ldap[0].bindCredential=password
cas.authn.ldap[0].principalAttributeId=uid
cas.authn.ldap[0].principalAttributeList=uid,Email,cn,o,gidNumber

cas.authn.attributeRepository.ldap[0].order=1
cas.authn.attributeRepository.ldap[0].ldapUrl=ldap://openldap
cas.authn.attributeRepository.ldap[0].validatePeriod=270
cas.authn.attributeRepository.ldap[0].searchFilter=uid={user}
cas.authn.attributeRepository.ldap[0].useSsl=false
cas.authn.attributeRepository.ldap[0].useStartTls=false
cas.authn.attributeRepository.ldap[0].baseDn=ou=person,dc=directoryxx,dc=com
cas.authn.attributeRepository.ldap[0].bindDn=cn=admin,dc=directoryxx,dc=com
cas.authn.attributeRepository.ldap[0].bindCredential=password
cas.authn.attributeRepository.ldap[0].attributes.cn=name
cas.authn.attributeRepository.ldap[0].attributes.Email=email
cas.authn.attributeRepository.ldap[0].attributes.o=roles
cas.authn.attributeRepository.ldap[0].attributes.uid=username

cas.authn.mfa.gauth.issuer=CAS
cas.authn.mfa.gauth.label=CASLabel
cas.authn.mfa.globalPrincipalAttributeNameTriggers=o
cas.authn.mfa.globalPrincipalAttributeValueRegex=mfa-eligible
cas.authn.mfa.gauth.crypto.encryption.key=EdpQTNIMgOpkk5iGK5dedS_cqKQluNe5xrT6JtefiRE
cas.authn.mfa.gauth.crypto.signing.key=5V6TYXrVphagiz_NEJlMIkLfBxBAk2G-5rYp7BuDZkgmJyoDei78HMjZYkYUlMW2Ccsb2H1VIQng51gXmdKb1Q


## Service registry Mongodb
cas.serviceRegistry.mongo.host=mongodb
cas.serviceRegistry.mongo.clientUri=mongodb://mongocas:changeit@mongodb:27017/casdb
cas.serviceRegistry.mongo.idleTimeout=30000
cas.serviceRegistry.mongo.port=27017
cas.serviceRegistry.mongo.dropCollection=false
cas.serviceRegistry.mongo.socketKeepAlive=false
cas.serviceRegistry.mongo.password=changeit

#Depending on the feature at hand, CAS may decide to dynamically create its own collections and ignore this setting.
#cas.serviceRegistry.mongo.collection=cas-service-registry

cas.serviceRegistry.mongo.databaseName=cas-mongo-database
cas.serviceRegistry.mongo.timeout=5000
cas.serviceRegistry.mongo.userId=mongocas
cas.serviceRegistry.mongo.writeConcern=NORMAL
cas.serviceRegistry.mongo.authenticationDatabaseName=casdb
#cas.serviceRegistry.mongo.replicaSet=
cas.serviceRegistry.mongo.sslEnabled=false 
cas.serviceRegistry.mongo.retryWrites=false 

cas.serviceRegistry.mongo.conns.lifetime=60000
cas.serviceRegistry.mongo.conns.perHost=10


#
# Components of the MongoDB connection string broken out for ease of editing.
# See https://docs.mongodb.com/reference/connection-string/
#

#
# Ticket registry
#
cas.ticket.registry.mongo.clientUri=mongodb://mongocas:changeit@mongodb:27017/casdb
## Ticketing Mongodb
cas.ticket.registry.mongo.host=mongodb
# cas.ticket.registry.mongo.clientUri=mongodb
cas.ticket.registry.mongo.idleTimeout=30000
cas.ticket.registry.mongo.port=27017
cas.ticket.registry.mongo.dropCollection=false
cas.ticket.registry.mongo.socketKeepAlive=false
cas.ticket.registry.mongo.password=changeit

# Depending on the feature at hand, CAS may decide to dynamically create its own collections and ignore this setting.
#cas.ticket.registry.mongo.collection=cas-ticket-registry

cas.ticket.registry.mongo.databaseName=casdb
cas.ticket.registry.mongo.timeout=5000
cas.ticket.registry.mongo.userId=mongodb
cas.ticket.registry.mongo.writeConcern=NORMAL
cas.ticket.registry.mongo.authenticationDatabaseName=casdb
# cas.ticket.registry.mongo.replicaSet=
cas.ticket.registry.mongo.sslEnabled=false 
cas.ticket.registry.mongo.retryWrites=true 
cas.ticket.registry.mongo.conns.lifetime=60000
cas.ticket.registry.mongo.conns.perHost=10

cas.tgc.secure=true
cas.tgc.crypto.signing.key=AhwpReFV1L7w1TfVqoGcIcigeNUGEXPkPpUWNWF95eVW6zCBFq8Dyma0jecyfsaCV4Z3nFV9P0ScmIacVOwpRg
cas.tgc.crypto.encryption.key=RE1e8sxK9YRD3AuUs2xgZV9AWhsQ_oZjJzzNqq1bnyw

cas.webflow.crypto.signing.key=QGD9ZaWamSLktlhEofQMBbwVcd7XVcMXLfzJv7M19bE7FSCAINyirSKOob3-yOjg3ahT3ABs-4xTWYpSTbX89g
cas.webflow.crypto.encryption.key=fG+O4ABwuPo7jaBJOpvygg==

cas.serviceRegistry.json.location=file:/etc/cas/services

cas.authn.mfa.gauth.mongo.tokenCollection=MongoDbGoogleAuthenticatorTokenRepository
## Service registry Mongodb
cas.authn.mfa.gauth.mongo.host=mongodb
cas.authn.mfa.gauth.mongo.clientUri=mongodb://mongocas:changeit@mongodb:27017/casdb
cas.authn.mfa.gauth.mongo.idleTimeout=30000
cas.authn.mfa.gauth.mongo.port=27017
cas.authn.mfa.gauth.mongo.dropCollection=false
cas.authn.mfa.gauth.mongo.socketKeepAlive=false
cas.authn.mfa.gauth.mongo.password=changeit

#Depending on the feature at hand, CAS may decide to dynamically create its own collections and ignore this setting.
#cas.serviceRegistry.mongo.collection=cas-service-registry
cas.authn.mfa.gauth.mongo.databaseName=cas-mongo-database
cas.authn.mfa.gauth.mongo.timeout=5000
cas.authn.mfa.gauth.mongo.userId=mongocas
cas.authn.mfa.gauth.mongo.writeConcern=NORMAL
cas.authn.mfa.gauth.mongo.authenticationDatabaseName=casdb
#cas.serviceRegistry.mongo.replicaSet=
cas.authn.mfa.gauth.mongo.sslEnabled=false 
cas.authn.mfa.gauth.mongo.retryWrites=false 

cas.authn.mfa.gauth.mongo.conns.lifetime=60000
cas.authn.mfa.gauth.mongo.conns.perHost=10